diff -crB mutt-1.5.24/PATCHES mutt/PATCHES
*** mutt-1.5.24/PATCHES	2015-08-30 13:06:38.000000000 -0400
--- mutt/PATCHES	2015-10-14 14:46:43.000000000 -0400
***************
*** 0 ****
--- 1 ----
+ mutt-1.5.8-indexcolor-3
diff -crB mutt-1.5.24/color.c mutt/color.c
*** mutt-1.5.24/color.c	2015-08-30 13:06:38.000000000 -0400
--- mutt/color.c	2015-10-14 14:46:43.000000000 -0400
***************
*** 35,40 ****
--- 35,42 ----
  COLOR_LINE *ColorHdrList = NULL;
  COLOR_LINE *ColorBodyList = NULL;
  COLOR_LINE *ColorIndexList = NULL;
+ COLOR_LINE *ColorIndexSubjectList = NULL;
+ COLOR_LINE *ColorIndexAuthorList = NULL;
  
  /* local to this file */
  static int ColorQuoteSize;
***************
*** 94,99 ****
--- 96,109 ----
    { "underline",	MT_COLOR_UNDERLINE },
    { "index",		MT_COLOR_INDEX },
    { "prompt",		MT_COLOR_PROMPT },
+   { "index_subject",	MT_COLOR_INDEX_SUBJECT },
+   { "index_author",	MT_COLOR_INDEX_AUTHOR },
+   { "index_collapsed",	MT_COLOR_INDEX_COLLAPSED },
+   { "index_date",	MT_COLOR_INDEX_DATE },
+   { "index_flags",	MT_COLOR_INDEX_FLAGS },
+   { "index_label",	MT_COLOR_INDEX_LABEL },
+   { "index_number",	MT_COLOR_INDEX_NUMBER },
+   { "index_size",	MT_COLOR_INDEX_SIZE },
    { NULL,		0 }
  };
  
***************
*** 365,370 ****
--- 375,424 ----
    return _mutt_parse_uncolor(buf, s, data, err, 0);
  }
  
+ static void
+ mutt_do_uncolor (BUFFER *buf, BUFFER *s, COLOR_LINE **ColorList, 
+     			int *do_cache, int parse_uncolor)
+ {
+   COLOR_LINE *tmp, *last = NULL;
+ 
+   do
+   {
+     mutt_extract_token (buf, s, 0);
+     if (!mutt_strcmp ("*", buf->data))
+     {
+       for (tmp = *ColorList; tmp; )
+       {
+         if (!*do_cache)
+ 	  *do_cache = 1;
+ 	last = tmp;
+ 	tmp = tmp->next;
+ 	mutt_free_color_line(&last, parse_uncolor);
+       }
+       *ColorList = NULL;
+     }
+     else
+     {
+       for (last = NULL, tmp = *ColorList; tmp; last = tmp, tmp = tmp->next)
+       {
+ 	if (!mutt_strcmp (buf->data, tmp->pattern))
+ 	{
+           if (!*do_cache)
+ 	    *do_cache = 1;
+ 	  dprint(1,(debugfile,"Freeing pattern \"%s\" from ColorList\n",
+ 	                       tmp->pattern));
+ 	  if (last)
+ 	    last->next = tmp->next;
+ 	  else
+ 	    *ColorList = tmp->next;
+ 	  mutt_free_color_line(&tmp, parse_uncolor);
+ 	  break;
+ 	}
+       }
+     }
+   }
+   while (MoreArgs (s));
+ }
+ 
  static int _mutt_parse_uncolor (BUFFER *buf, BUFFER *s, unsigned long data,
  				BUFFER *err, short parse_uncolor)
  {
***************
*** 380,385 ****
--- 434,446 ----
      return (-1);
    }
  
+   if (object > MT_COLOR_INDEX_AUTHOR) /* uncolor index column */
+   {
+     ColorDefs[object] = 0;
+     set_option (OPTFORCEREDRAWINDEX);
+     return (0);
+   }
+ 
    if (mutt_strncmp (buf->data, "index", 5) == 0)
      list = &ColorIndexList;
    else if (mutt_strncmp (buf->data, "body", 4) == 0)
***************
*** 423,465 ****
      return 0;
    }
  
!   do
!   {
!     mutt_extract_token (buf, s, 0);
!     if (!mutt_strcmp ("*", buf->data))
!     {
!       for (tmp = *list; tmp; )
!       {
!         if (!do_cache)
! 	  do_cache = 1;
! 	last = tmp;
! 	tmp = tmp->next;
! 	mutt_free_color_line(&last, parse_uncolor);
!       }
!       *list = NULL;
!     }
!     else
!     {
!       for (last = NULL, tmp = *list; tmp; last = tmp, tmp = tmp->next)
!       {
! 	if (!mutt_strcmp (buf->data, tmp->pattern))
! 	{
!           if (!do_cache)
! 	    do_cache = 1;
! 	  dprint(1,(debugfile,"Freeing pattern \"%s\" from color list\n",
! 	                       tmp->pattern));
! 	  if (last)
! 	    last->next = tmp->next;
! 	  else
! 	    *list = tmp->next;
! 	  mutt_free_color_line(&tmp, parse_uncolor);
! 	  break;
! 	}
!       }
!     }
!   }
!   while (MoreArgs (s));
! 
  
    if (do_cache && !option (OPTNOCURSES))
    {
--- 484,495 ----
      return 0;
    }
  
!   if (object == MT_COLOR_INDEX)
!     mutt_do_uncolor(buf, s, &ColorIndexList, &do_cache, parse_uncolor);
!   if (object == MT_COLOR_INDEX_SUBJECT)
!     mutt_do_uncolor(buf, s, &ColorIndexSubjectList, &do_cache, parse_uncolor);
!   if (object == MT_COLOR_INDEX_AUTHOR)
!     mutt_do_uncolor(buf, s, &ColorIndexAuthorList, &do_cache, parse_uncolor);
  
    if (do_cache && !option (OPTNOCURSES))
    {
***************
*** 699,705 ****
  
    /* extract a regular expression if needed */
    
!   if (object == MT_COLOR_HEADER || object == MT_COLOR_BODY || object == MT_COLOR_INDEX)
    {
      if (!MoreArgs (s))
      {
--- 729,735 ----
  
    /* extract a regular expression if needed */
    
!   if (object == MT_COLOR_HEADER || object == MT_COLOR_BODY || object == MT_COLOR_INDEX || object == MT_COLOR_INDEX_SUBJECT || object == MT_COLOR_INDEX_AUTHOR)
    {
      if (!MoreArgs (s))
      {
***************
*** 743,748 ****
--- 773,790 ----
      r = add_pattern (&ColorIndexList, buf->data, 1, fg, bg, attr, err, 1);
      set_option (OPTFORCEREDRAWINDEX);
    }
+   else if (object == MT_COLOR_INDEX_SUBJECT)
+   {
+     r = add_pattern (&ColorIndexSubjectList, buf->data,
+ 		     1, fg, bg, attr, err, 1);
+     set_option (OPTFORCEREDRAWINDEX);
+   }
+   else if (object == MT_COLOR_INDEX_AUTHOR)
+   {
+     r = add_pattern (&ColorIndexAuthorList, buf->data,
+ 		     1, fg, bg, attr, err, 1);
+     set_option (OPTFORCEREDRAWINDEX);
+   }
    else if (object == MT_COLOR_QUOTED)
    {
      if (q_level >= ColorQuoteSize)
***************
*** 768,774 ****
--- 810,820 ----
        ColorQuote[q_level] = fgbgattr_to_color(fg, bg, attr);
    }
    else
+   {
      ColorDefs[object] = fgbgattr_to_color(fg, bg, attr);
+     if (object > MT_COLOR_INDEX_AUTHOR)
+       set_option (OPTFORCEREDRAWINDEX);
+   }
  
    return (r);
  }
Only in mutt/: color.c.orig
diff -crB mutt-1.5.24/curs_lib.c mutt/curs_lib.c
*** mutt-1.5.24/curs_lib.c	2015-08-30 13:06:38.000000000 -0400
--- mutt/curs_lib.c	2015-10-14 14:46:43.000000000 -0400
***************
*** 726,731 ****
--- 726,732 ----
    size_t k, k2;
    char scratch[MB_LEN_MAX];
    mbstate_t mbstate1, mbstate2;
+   int escaped = 0;
  
    memset(&mbstate1, 0, sizeof (mbstate1));
    memset(&mbstate2, 0, sizeof (mbstate2));
***************
*** 741,747 ****
        k = (k == (size_t)(-1)) ? 1 : n;
        wc = replacement_char ();
      }
!     if (arboreal && wc < M_TREE_MAX)
        w = 1; /* hack */
      else
      {
--- 742,756 ----
        k = (k == (size_t)(-1)) ? 1 : n;
        wc = replacement_char ();
      }
!     if (escaped) {
!       escaped = 0;
!       w = 0;
!     }
!     else if (arboreal && wc == M_SPECIAL_INDEX) {
!       escaped = 1;
!       w = 0;
!     }
!     else if (arboreal && wc < M_TREE_MAX)
        w = 1; /* hack */
      else
      {
Only in mutt/: curs_lib.c.orig
diff -crB mutt-1.5.24/hdrline.c mutt/hdrline.c
*** mutt-1.5.24/hdrline.c	2015-08-30 13:06:38.000000000 -0400
--- mutt/hdrline.c	2015-10-14 14:46:43.000000000 -0400
***************
*** 103,108 ****
--- 103,136 ----
    return 0;
  }
  
+ /* Takes the color to embed, the buffer to manipulate and the buffer length as
+  * arguments.
+  * Returns the number of chars written. */
+ static size_t add_index_color(char *buf, size_t buflen,
+     			   format_flag flags, char color)
+ {
+   int len;
+ 
+   /* only add color markers if we are operating on main index entries. */
+   if (!(flags & M_FORMAT_INDEX))
+     return 0;
+ 
+   if (color == MT_COLOR_INDEX) { /* buf might be uninitialized other cases */
+     len = mutt_strlen(buf);
+     buf += len;
+     buflen -= len;
+   }
+ 
+   if (buflen < 2)
+     return 0;
+ 
+   buf[0] = M_SPECIAL_INDEX;
+   buf[1] = color;
+   buf[2] = '\0';
+ 
+   return 2;
+ }
+ 
  static void make_from (ENVELOPE *hdr, char *buf, size_t len, int do_lists)
  {
    int me;
***************
*** 253,258 ****
--- 281,287 ----
  #define THREAD_NEW (threads && hdr->collapsed && hdr->num_hidden > 1 && mutt_thread_contains_unread (ctx, hdr) == 1)
  #define THREAD_OLD (threads && hdr->collapsed && hdr->num_hidden > 1 && mutt_thread_contains_unread (ctx, hdr) == 2)
    size_t len;
+   size_t colorlen;
  
    hdr = hfi->hdr;
    ctx = hfi->ctx;
***************
*** 304,315 ****
        break;
      
      case 'c':
        mutt_pretty_size (buf2, sizeof (buf2), (long) hdr->content->length);
!       mutt_format_s (dest, destlen, prefix, buf2);
        break;
  
      case 'C':
!       snprintf (fmt, sizeof (fmt), "%%%sd", prefix);
        snprintf (dest, destlen, fmt, hdr->msgno + 1);
        break;
  
--- 333,349 ----
        break;
      
      case 'c':
+       colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_SIZE);
        mutt_pretty_size (buf2, sizeof (buf2), (long) hdr->content->length);
!       mutt_format_s (dest+colorlen, destlen-colorlen, prefix, buf2);
!       add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
        break;
  
      case 'C':
!       colorlen = add_index_color(fmt, sizeof(fmt), flags, MT_COLOR_INDEX_NUMBER);
!       snprintf (fmt+colorlen, sizeof(fmt)-colorlen, "%%%sd", prefix);
!       add_index_color(fmt+colorlen, sizeof(fmt)-colorlen, flags, MT_COLOR_INDEX);
! 
        snprintf (dest, destlen, fmt, hdr->msgno + 1);
        break;
  
***************
*** 408,414 ****
  	if (do_locales)
  	  setlocale (LC_TIME, "C");
  
! 	mutt_format_s (dest, destlen, prefix, buf2);
  	if (len > 0 && op != 'd' && op != 'D') /* Skip ending op */
  	  src = cp + 1;
        }
--- 442,451 ----
  	if (do_locales)
  	  setlocale (LC_TIME, "C");
  
! 	colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_DATE);
! 	mutt_format_s (dest+colorlen, destlen-colorlen, prefix, buf2);
! 	add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
! 
  	if (len > 0 && op != 'd' && op != 'D') /* Skip ending op */
  	  src = cp + 1;
        }
***************
*** 438,445 ****
      case 'F':
        if (!optional)
        {
          make_from (hdr->env, buf2, sizeof (buf2), 0);
! 	mutt_format_s (dest, destlen, prefix, buf2);
        }
        else if (mutt_addr_is_user (hdr->env->from))
          optional = 0;
--- 475,484 ----
      case 'F':
        if (!optional)
        {
+ 	colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_AUTHOR);
          make_from (hdr->env, buf2, sizeof (buf2), 0);
! 	mutt_format_s (dest+colorlen, destlen-colorlen, prefix, buf2);
! 	add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
        }
        else if (mutt_addr_is_user (hdr->env->from))
          optional = 0;
***************
*** 465,471 ****
        if (!optional)
        {
  	snprintf (fmt, sizeof (fmt), "%%%sd", prefix);
! 	snprintf (dest, destlen, fmt, (int) hdr->lines);
        }
        else if (hdr->lines <= 0)
          optional = 0;
--- 504,512 ----
        if (!optional)
        {
  	snprintf (fmt, sizeof (fmt), "%%%sd", prefix);
! 	colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_SIZE);
! 	snprintf (dest+colorlen, destlen-colorlen, fmt, (int) hdr->lines);
! 	add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
        }
        else if (hdr->lines <= 0)
          optional = 0;
***************
*** 474,481 ****
      case 'L':
        if (!optional)
        {
  	make_from (hdr->env, buf2, sizeof (buf2), 1);
! 	mutt_format_s (dest, destlen, prefix, buf2);
        }
        else if (!check_for_mailing_list (hdr->env->to, NULL, NULL, 0) &&
  	       !check_for_mailing_list (hdr->env->cc, NULL, NULL, 0))
--- 515,524 ----
      case 'L':
        if (!optional)
        {
+ 	colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_AUTHOR);
  	make_from (hdr->env, buf2, sizeof (buf2), 1);
! 	mutt_format_s (dest+colorlen, destlen-colorlen, prefix, buf2);
! 	add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
        }
        else if (!check_for_mailing_list (hdr->env->to, NULL, NULL, 0) &&
  	       !check_for_mailing_list (hdr->env->cc, NULL, NULL, 0))
***************
*** 530,539 ****
        snprintf (fmt, sizeof (fmt), "%%%sd", prefix);
        if (!optional)
        {
! 	if (threads && is_index && hdr->collapsed && hdr->num_hidden > 1)
! 	  snprintf (dest, destlen, fmt, hdr->num_hidden);
! 	else if (is_index && threads)
! 	  mutt_format_s (dest, destlen, prefix, " ");
  	else
  	  *dest = '\0';
        }
--- 573,588 ----
        snprintf (fmt, sizeof (fmt), "%%%sd", prefix);
        if (!optional)
        {
! 	colorlen = add_index_color(dest, destlen, flags, 
! 				   MT_COLOR_INDEX_COLLAPSED);
! 	if (threads && is_index && hdr->collapsed && hdr->num_hidden > 1) {
! 	  snprintf (dest+colorlen, destlen-colorlen, fmt, hdr->num_hidden);
! 	  add_index_color(dest, destlen-colorlen, flags, MT_COLOR_INDEX);
! 	}
! 	else if (is_index && threads) {
! 	  mutt_format_s (dest+colorlen, destlen-colorlen, prefix, " ");
! 	  add_index_color(dest, destlen-colorlen, flags, MT_COLOR_INDEX);
! 	}
  	else
  	  *dest = '\0';
        }
***************
*** 554,568 ****
        {
  	if (flags & M_FORMAT_FORCESUBJ)
  	{
! 	  mutt_format_s (dest, destlen, "", NONULL (hdr->env->subject));
  	  snprintf (buf2, sizeof (buf2), "%s%s", hdr->tree, dest);
  	  mutt_format_s_tree (dest, destlen, prefix, buf2);
  	}
  	else
  	  mutt_format_s_tree (dest, destlen, prefix, hdr->tree);
        }
!       else
! 	mutt_format_s (dest, destlen, prefix, NONULL (hdr->env->subject));
        break;
  
      case 'S':
--- 603,625 ----
        {
  	if (flags & M_FORMAT_FORCESUBJ)
  	{
! 	  colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_SUBJECT);
! 	  mutt_format_s (dest+colorlen, destlen-colorlen, "", 
! 	      NONULL (hdr->env->subject));
! 	  add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
! 
  	  snprintf (buf2, sizeof (buf2), "%s%s", hdr->tree, dest);
  	  mutt_format_s_tree (dest, destlen, prefix, buf2);
  	}
  	else
  	  mutt_format_s_tree (dest, destlen, prefix, hdr->tree);
        }
!       else {
! 	colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_SUBJECT);
! 	mutt_format_s (dest+colorlen, destlen-colorlen, prefix, 
! 	    NONULL (hdr->env->subject));
! 	add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
!       }
        break;
  
      case 'S':
***************
*** 658,664 ****
  		hdr->tagged ? '*' :
  		(hdr->flagged ? '!' :
  		 (Tochars && ((i = mutt_user_is_recipient (hdr)) < mutt_strlen (Tochars)) ? Tochars[i] : ' ')));
!       mutt_format_s (dest, destlen, prefix, buf2);
        break;
  
      case 'X':
--- 715,723 ----
  		hdr->tagged ? '*' :
  		(hdr->flagged ? '!' :
  		 (Tochars && ((i = mutt_user_is_recipient (hdr)) < mutt_strlen (Tochars)) ? Tochars[i] : ' ')));
!       colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_FLAGS);
!       mutt_format_s (dest+colorlen, destlen-colorlen, prefix, buf2);
!       add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
        break;
  
      case 'X':
***************
*** 678,684 ****
         if (optional)
  	 optional = hdr->env->x_label ? 1 : 0;
  
!        mutt_format_s (dest, destlen, prefix, NONULL (hdr->env->x_label));
         break;
   
      case 'Y':
--- 737,745 ----
         if (optional)
  	 optional = hdr->env->x_label ? 1 : 0;
  
!        colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_LABEL);
!        mutt_format_s (dest+colorlen, destlen-colorlen, prefix, NONULL (hdr->env->x_label));
!        add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
         break;
   
      case 'Y':
***************
*** 704,713 ****
        if (optional)
  	optional = i;
  
        if (i)
!         mutt_format_s (dest, destlen, prefix, NONULL (hdr->env->x_label));
        else
!         mutt_format_s (dest, destlen, prefix, "");
  
        break;
  
--- 765,776 ----
        if (optional)
  	optional = i;
  
+       colorlen = add_index_color(dest, destlen, flags, MT_COLOR_INDEX_LABEL);
        if (i)
!         mutt_format_s (dest+colorlen, destlen-colorlen, prefix, NONULL (hdr->env->x_label));
        else
!         mutt_format_s (dest+colorlen, destlen-colorlen, prefix, "");
!       add_index_color(dest+colorlen, destlen-colorlen, flags, MT_COLOR_INDEX);
  
        break;
  
diff -crB mutt-1.5.24/menu.c mutt/menu.c
*** mutt-1.5.24/menu.c	2015-08-30 13:06:38.000000000 -0400
--- mutt/menu.c	2015-10-14 14:46:43.000000000 -0400
***************
*** 29,35 ****
  
  char* SearchBuffers[MENU_MAX];
  
! static void print_enriched_string (int attr, unsigned char *s, int do_color)
  {
    wchar_t wc;
    size_t k;
--- 29,58 ----
  
  char* SearchBuffers[MENU_MAX];
  
! static int get_color(int index, int type) {
!   COLOR_LINE *color;
!   HEADER *hdr = Context->hdrs[index];
! 
!   switch (type) {
!     case MT_COLOR_INDEX_SUBJECT:
!       color = ColorIndexSubjectList;
!       break;
!     case MT_COLOR_INDEX_AUTHOR:
!       color = ColorIndexAuthorList;
!       break;
!     default:
!       return ColorDefs[type];
!   }
! 
!   for (; color; color = color->next)
!     if (mutt_pattern_exec (color->color_pattern, M_MATCH_FULL_ADDRESS, 
! 	Context, hdr))
!       return color->pair;
! 
!   return 0;
! }
! 
! static void print_enriched_string (int index, int attr, unsigned char *s, int do_color)
  {
    wchar_t wc;
    size_t k;
***************
*** 161,166 ****
--- 184,201 ----
        }
        if (do_color) ATTRSET(attr);
      }
+     else if(*s == M_SPECIAL_INDEX)
+     {
+       s++;
+       if (do_color) {
+ 	if (*s == MT_COLOR_INDEX)
+ 	  attrset(attr);
+ 	else
+ 	  attron(get_color(index, *s));
+       }
+       s++; 
+       n -= 2;
+     }
      else if ((k = mbrtowc (&wc, (char *)s, n, &mbstate)) > 0)
      {
        addnstr ((char *)s, k);
***************
*** 267,273 ****
        else if (option(OPTARROWCURSOR))
  	addstr("   ");
  
!       print_enriched_string (attr, (unsigned char *) buf, do_color);
      }
      else
      {
--- 302,308 ----
        else if (option(OPTARROWCURSOR))
  	addstr("   ");
  
!       print_enriched_string (i, attr, (unsigned char *) buf, do_color);
      }
      else
      {
***************
*** 302,308 ****
        menu_make_entry (buf, sizeof (buf), menu, menu->oldcurrent);
        menu_pad_string (buf, sizeof (buf));
        move (menu->oldcurrent + menu->offset - menu->top, 3);
!       print_enriched_string (menu->color(menu->oldcurrent), (unsigned char *) buf, 1);
      }
  
      /* now draw it in the new location */
--- 337,343 ----
        menu_make_entry (buf, sizeof (buf), menu, menu->oldcurrent);
        menu_pad_string (buf, sizeof (buf));
        move (menu->oldcurrent + menu->offset - menu->top, 3);
!       print_enriched_string (menu->oldcurrent, menu->color(menu->oldcurrent), (unsigned char *) buf, 1);
      }
  
      /* now draw it in the new location */
***************
*** 314,327 ****
      /* erase the current indicator */
      menu_make_entry (buf, sizeof (buf), menu, menu->oldcurrent);
      menu_pad_string (buf, sizeof (buf));
!     print_enriched_string (menu->color(menu->oldcurrent), (unsigned char *) buf, 1);
  
      /* now draw the new one to reflect the change */
      menu_make_entry (buf, sizeof (buf), menu, menu->current);
      menu_pad_string (buf, sizeof (buf));
      SETCOLOR(MT_COLOR_INDICATOR);
      move(menu->current - menu->top + menu->offset, 0);
!     print_enriched_string (menu->color(menu->current), (unsigned char *) buf, 0);
    }
    menu->redraw &= REDRAW_STATUS;
    NORMAL_COLOR;
--- 349,362 ----
      /* erase the current indicator */
      menu_make_entry (buf, sizeof (buf), menu, menu->oldcurrent);
      menu_pad_string (buf, sizeof (buf));
!     print_enriched_string (menu->oldcurrent, menu->color(menu->oldcurrent), (unsigned char *) buf, 1);
  
      /* now draw the new one to reflect the change */
      menu_make_entry (buf, sizeof (buf), menu, menu->current);
      menu_pad_string (buf, sizeof (buf));
      SETCOLOR(MT_COLOR_INDICATOR);
      move(menu->current - menu->top + menu->offset, 0);
!     print_enriched_string (menu->current, menu->color(menu->current), (unsigned char *) buf, 0);
    }
    menu->redraw &= REDRAW_STATUS;
    NORMAL_COLOR;
***************
*** 343,352 ****
      ATTRSET(attr);
      addch (' ');
      menu_pad_string (buf, sizeof (buf));
!     print_enriched_string (attr, (unsigned char *) buf, 1);
    }
    else
!     print_enriched_string (attr, (unsigned char *) buf, 0);
    menu->redraw &= REDRAW_STATUS;
    NORMAL_COLOR;
  }
--- 378,387 ----
      ATTRSET(attr);
      addch (' ');
      menu_pad_string (buf, sizeof (buf));
!     print_enriched_string (menu->current, attr, (unsigned char *) buf, 1);
    }
    else
!     print_enriched_string (menu->current, attr, (unsigned char *) buf, 0);
    menu->redraw &= REDRAW_STATUS;
    NORMAL_COLOR;
  }
diff -crB mutt-1.5.24/mutt.h mutt/mutt.h
*** mutt-1.5.24/mutt.h	2015-08-30 13:06:38.000000000 -0400
--- mutt/mutt.h	2015-10-14 14:46:43.000000000 -0400
***************
*** 161,166 ****
--- 161,168 ----
  #define M_TREE_MISSING		13
  #define M_TREE_MAX		14
  
+ #define M_SPECIAL_INDEX		M_TREE_MAX
+ 
  #define M_THREAD_COLLAPSE	(1<<0)
  #define M_THREAD_UNCOLLAPSE	(1<<1)
  #define M_THREAD_GET_HIDDEN	(1<<2)
diff -crB mutt-1.5.24/mutt_curses.h mutt/mutt_curses.h
*** mutt-1.5.24/mutt_curses.h	2015-08-30 13:06:38.000000000 -0400
--- mutt/mutt_curses.h	2015-10-14 14:46:43.000000000 -0400
***************
*** 121,126 ****
--- 121,136 ----
    MT_COLOR_UNDERLINE,
    MT_COLOR_INDEX,
    MT_COLOR_PROMPT,
+   /* please no non-MT_COLOR_INDEX objects after this point */
+   MT_COLOR_INDEX_SUBJECT,
+   MT_COLOR_INDEX_AUTHOR,
+   /* below only index coloring stuff that doesn't have a colorline! */
+   MT_COLOR_INDEX_COLLAPSED,
+   MT_COLOR_INDEX_DATE,
+   MT_COLOR_INDEX_FLAGS,
+   MT_COLOR_INDEX_LABEL,
+   MT_COLOR_INDEX_NUMBER,
+   MT_COLOR_INDEX_SIZE,
    MT_COLOR_MAX
  };
  
***************
*** 174,179 ****
--- 184,191 ----
  extern COLOR_LINE *ColorHdrList;
  extern COLOR_LINE *ColorBodyList;
  extern COLOR_LINE *ColorIndexList;
+ extern COLOR_LINE *ColorIndexSubjectList;
+ extern COLOR_LINE *ColorIndexAuthorList;
  
  void ci_init_color (void);
  void ci_start_color (void);
Only in mutt/: mutt_curses.h.orig
